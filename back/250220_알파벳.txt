#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, -1, 0, 1 };
int R, C;
vector<string> map;
int max_count = 0;

void dfs(int x, int y, vector<bool>& visited, int count) {
    max_count = max(max_count, count);

    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (nx < 0 || ny < 0 || nx >= R || ny >= C) continue;
        char next_char = map[nx][ny];
        if (visited[next_char - 'A']) continue;

        visited[next_char - 'A'] = true;
        dfs(nx, ny, visited, count + 1);
        visited[next_char - 'A'] = false;
    }
}

int main() {
    cin >> R >> C;
    map.resize(R);
    for (int i = 0; i < R; i++) {
        cin >> map[i];
    }

    vector<bool> visited(26, false);
    visited[map[0][0] - 'A'] = true;
    dfs(0, 0, visited, 1);

    cout << max_count << endl;
    return 0;
}