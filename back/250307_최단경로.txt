#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;
const int INF = numeric_limits<int>::max();

int V, E, start;
vector<vector<pair<int, int>>> graph;
vector<int> dist;

void dijkstra(int start) 
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({ 0, start });
    dist[start] = 0;

    while (!pq.empty()) 
    {
        int cost = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if (dist[u] < cost) continue;

        for (auto edge : graph[u]) 
        {
            int v = edge.first;
            int weight = edge.second;

            if (dist[v] > dist[u] + weight) 
            {
                dist[v] = dist[u] + weight;
                pq.push({ dist[v], v });
            }
        }
    }
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> V >> E >> start;
    graph.resize(V + 1);
    dist.assign(V + 1, INF);

    for (int i = 0; i < E; i++) 
    {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({ v, w });
    }

    dijkstra(start);

    for (int i = 1; i <= V; i++) 
    {
        if (dist[i] == INF)
            cout << "INF\n";
        else
            cout << dist[i] << "\n";
    }

    return 0;
}